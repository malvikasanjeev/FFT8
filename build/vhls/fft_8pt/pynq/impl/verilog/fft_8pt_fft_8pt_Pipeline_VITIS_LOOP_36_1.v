// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft_8pt_fft_8pt_Pipeline_VITIS_LOOP_36_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        temp2_0_address0,
        temp2_0_ce0,
        temp2_0_q0,
        temp2_0_address1,
        temp2_0_ce1,
        temp2_0_q1,
        temp2_1_address0,
        temp2_1_ce0,
        temp2_1_q0,
        temp2_1_address1,
        temp2_1_ce1,
        temp2_1_q1,
        FFT_output_0_address0,
        FFT_output_0_ce0,
        FFT_output_0_we0,
        FFT_output_0_d0,
        FFT_output_0_address1,
        FFT_output_0_ce1,
        FFT_output_0_we1,
        FFT_output_0_d1,
        FFT_output_1_address0,
        FFT_output_1_ce0,
        FFT_output_1_we0,
        FFT_output_1_d0,
        FFT_output_1_address1,
        FFT_output_1_ce1,
        FFT_output_1_we1,
        FFT_output_1_d1,
        grp_fu_162_p_din0,
        grp_fu_162_p_din1,
        grp_fu_162_p_opcode,
        grp_fu_162_p_dout0,
        grp_fu_162_p_ce,
        grp_fu_166_p_din0,
        grp_fu_166_p_din1,
        grp_fu_166_p_opcode,
        grp_fu_166_p_dout0,
        grp_fu_166_p_ce,
        grp_fu_170_p_din0,
        grp_fu_170_p_din1,
        grp_fu_170_p_opcode,
        grp_fu_170_p_dout0,
        grp_fu_170_p_ce,
        grp_fu_174_p_din0,
        grp_fu_174_p_din1,
        grp_fu_174_p_opcode,
        grp_fu_174_p_dout0,
        grp_fu_174_p_ce,
        grp_fu_178_p_din0,
        grp_fu_178_p_din1,
        grp_fu_178_p_dout0,
        grp_fu_178_p_ce,
        grp_fu_182_p_din0,
        grp_fu_182_p_din1,
        grp_fu_182_p_dout0,
        grp_fu_182_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] temp2_0_address0;
output   temp2_0_ce0;
input  [31:0] temp2_0_q0;
output  [2:0] temp2_0_address1;
output   temp2_0_ce1;
input  [31:0] temp2_0_q1;
output  [2:0] temp2_1_address0;
output   temp2_1_ce0;
input  [31:0] temp2_1_q0;
output  [2:0] temp2_1_address1;
output   temp2_1_ce1;
input  [31:0] temp2_1_q1;
output  [2:0] FFT_output_0_address0;
output   FFT_output_0_ce0;
output   FFT_output_0_we0;
output  [31:0] FFT_output_0_d0;
output  [2:0] FFT_output_0_address1;
output   FFT_output_0_ce1;
output   FFT_output_0_we1;
output  [31:0] FFT_output_0_d1;
output  [2:0] FFT_output_1_address0;
output   FFT_output_1_ce0;
output   FFT_output_1_we0;
output  [31:0] FFT_output_1_d0;
output  [2:0] FFT_output_1_address1;
output   FFT_output_1_ce1;
output   FFT_output_1_we1;
output  [31:0] FFT_output_1_d1;
output  [31:0] grp_fu_162_p_din0;
output  [31:0] grp_fu_162_p_din1;
output  [0:0] grp_fu_162_p_opcode;
input  [31:0] grp_fu_162_p_dout0;
output   grp_fu_162_p_ce;
output  [31:0] grp_fu_166_p_din0;
output  [31:0] grp_fu_166_p_din1;
output  [1:0] grp_fu_166_p_opcode;
input  [31:0] grp_fu_166_p_dout0;
output   grp_fu_166_p_ce;
output  [31:0] grp_fu_170_p_din0;
output  [31:0] grp_fu_170_p_din1;
output  [0:0] grp_fu_170_p_opcode;
input  [31:0] grp_fu_170_p_dout0;
output   grp_fu_170_p_ce;
output  [31:0] grp_fu_174_p_din0;
output  [31:0] grp_fu_174_p_din1;
output  [0:0] grp_fu_174_p_opcode;
input  [31:0] grp_fu_174_p_dout0;
output   grp_fu_174_p_ce;
output  [31:0] grp_fu_178_p_din0;
output  [31:0] grp_fu_178_p_din1;
input  [31:0] grp_fu_178_p_dout0;
output   grp_fu_178_p_ce;
output  [31:0] grp_fu_182_p_din0;
output  [31:0] grp_fu_182_p_din1;
input  [31:0] grp_fu_182_p_dout0;
output   grp_fu_182_p_ce;

reg ap_idle;
reg temp2_0_ce0;
reg temp2_0_ce1;
reg temp2_1_ce0;
reg temp2_1_ce1;
reg FFT_output_0_ce0;
reg FFT_output_0_we0;
reg FFT_output_0_ce1;
reg FFT_output_0_we1;
reg FFT_output_1_ce0;
reg FFT_output_1_we0;
reg FFT_output_1_ce1;
reg FFT_output_1_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln36_fu_196_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] i_3_reg_268;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] i_3_reg_268_pp0_iter1_reg;
reg   [2:0] i_3_reg_268_pp0_iter2_reg;
reg   [2:0] i_3_reg_268_pp0_iter3_reg;
reg   [2:0] i_3_reg_268_pp0_iter4_reg;
reg   [2:0] i_3_reg_268_pp0_iter5_reg;
reg   [2:0] i_3_reg_268_pp0_iter6_reg;
reg   [2:0] i_3_reg_268_pp0_iter7_reg;
reg   [2:0] i_3_reg_268_pp0_iter8_reg;
wire   [63:0] zext_ln38_fu_214_p1;
reg   [63:0] zext_ln38_reg_278;
reg   [63:0] zext_ln38_reg_278_pp0_iter1_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter2_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter3_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter4_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter5_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter6_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter7_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter8_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter9_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter10_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter11_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter12_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter13_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter14_reg;
reg   [63:0] zext_ln38_reg_278_pp0_iter15_reg;
wire   [31:0] p_r_M_value_fu_228_p6;
reg   [31:0] p_r_M_value_reg_294;
wire   [31:0] p_r_M_value_1_fu_242_p6;
reg   [31:0] p_r_M_value_1_reg_300;
reg   [31:0] p_t_reg_306;
reg   [31:0] p_t_1_reg_312;
reg   [31:0] mul_ac_i_i_i_reg_318;
reg   [31:0] mul_bd_i_i_i_reg_323;
wire   [31:0] grp_fu_180_p2;
reg   [31:0] mul_ad_i_i_i_reg_328;
wire   [31:0] grp_fu_184_p2;
reg   [31:0] mul_bc_i_i_i_reg_333;
wire   [63:0] zext_ln36_fu_256_p1;
reg   [63:0] zext_ln36_reg_338;
reg   [63:0] zext_ln36_reg_338_pp0_iter10_reg;
reg   [63:0] zext_ln36_reg_338_pp0_iter11_reg;
reg   [63:0] zext_ln36_reg_338_pp0_iter12_reg;
reg   [63:0] zext_ln36_reg_338_pp0_iter13_reg;
reg   [63:0] zext_ln36_reg_338_pp0_iter14_reg;
reg   [63:0] zext_ln36_reg_338_pp0_iter15_reg;
reg   [31:0] p_r_M_value_2_reg_354;
reg   [31:0] p_r_M_value_3_reg_360;
reg   [31:0] p_r_M_value_4_reg_366;
reg   [31:0] p_r_M_value_5_reg_372;
reg   [31:0] p_r_M_value_6_reg_378;
reg   [31:0] p_r_M_value_7_reg_383;
wire   [31:0] grp_fu_164_p2;
reg   [31:0] p_r_M_value_8_reg_388;
wire   [31:0] grp_fu_168_p2;
reg   [31:0] p_r_M_value_9_reg_393;
wire    ap_block_pp0_stage0;
reg   [2:0] i_fu_44;
wire   [2:0] add_ln36_fu_202_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_3;
wire   [2:0] xor_ln38_fu_208_p2;
wire   [1:0] trunc_ln38_fu_225_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft_8pt_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_value_4_reg_366),
    .din1(p_r_M_value_2_reg_354),
    .ce(1'b1),
    .dout(grp_fu_164_p2)
);

fft_8pt_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_value_5_reg_372),
    .din1(p_r_M_value_3_reg_360),
    .ce(1'b1),
    .dout(grp_fu_168_p2)
);

fft_8pt_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_value_reg_294),
    .din1(p_t_1_reg_312),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

fft_8pt_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_r_M_value_1_reg_300),
    .din1(p_t_reg_306),
    .ce(1'b1),
    .dout(grp_fu_184_p2)
);

fft_8pt_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U42(
    .din0(32'd1065353216),
    .din1(32'd1060439283),
    .din2(32'd0),
    .din3(32'd3207922931),
    .din4(trunc_ln38_fu_225_p1),
    .dout(p_r_M_value_fu_228_p6)
);

fft_8pt_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U43(
    .din0(32'd0),
    .din1(32'd3207922931),
    .din2(32'd3212836864),
    .din3(32'd3207922931),
    .din4(trunc_ln38_fu_225_p1),
    .dout(p_r_M_value_1_fu_242_p6)
);

fft_8pt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln36_fu_196_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_44 <= add_ln36_fu_202_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_44 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        i_3_reg_268_pp0_iter2_reg <= i_3_reg_268_pp0_iter1_reg;
        i_3_reg_268_pp0_iter3_reg <= i_3_reg_268_pp0_iter2_reg;
        i_3_reg_268_pp0_iter4_reg <= i_3_reg_268_pp0_iter3_reg;
        i_3_reg_268_pp0_iter5_reg <= i_3_reg_268_pp0_iter4_reg;
        i_3_reg_268_pp0_iter6_reg <= i_3_reg_268_pp0_iter5_reg;
        i_3_reg_268_pp0_iter7_reg <= i_3_reg_268_pp0_iter6_reg;
        i_3_reg_268_pp0_iter8_reg <= i_3_reg_268_pp0_iter7_reg;
        mul_ac_i_i_i_reg_318 <= grp_fu_178_p_dout0;
        mul_ad_i_i_i_reg_328 <= grp_fu_180_p2;
        mul_bc_i_i_i_reg_333 <= grp_fu_184_p2;
        mul_bd_i_i_i_reg_323 <= grp_fu_182_p_dout0;
        p_r_M_value_2_reg_354 <= grp_fu_162_p_dout0;
        p_r_M_value_3_reg_360 <= grp_fu_166_p_dout0;
        p_r_M_value_6_reg_378 <= grp_fu_170_p_dout0;
        p_r_M_value_7_reg_383 <= grp_fu_174_p_dout0;
        p_r_M_value_8_reg_388 <= grp_fu_164_p2;
        p_r_M_value_9_reg_393 <= grp_fu_168_p2;
        zext_ln36_reg_338[2 : 0] <= zext_ln36_fu_256_p1[2 : 0];
        zext_ln36_reg_338_pp0_iter10_reg[2 : 0] <= zext_ln36_reg_338[2 : 0];
        zext_ln36_reg_338_pp0_iter11_reg[2 : 0] <= zext_ln36_reg_338_pp0_iter10_reg[2 : 0];
        zext_ln36_reg_338_pp0_iter12_reg[2 : 0] <= zext_ln36_reg_338_pp0_iter11_reg[2 : 0];
        zext_ln36_reg_338_pp0_iter13_reg[2 : 0] <= zext_ln36_reg_338_pp0_iter12_reg[2 : 0];
        zext_ln36_reg_338_pp0_iter14_reg[2 : 0] <= zext_ln36_reg_338_pp0_iter13_reg[2 : 0];
        zext_ln36_reg_338_pp0_iter15_reg[2 : 0] <= zext_ln36_reg_338_pp0_iter14_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter10_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter9_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter11_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter10_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter12_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter11_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter13_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter12_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter14_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter13_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter15_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter14_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter2_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter1_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter3_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter2_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter4_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter3_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter5_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter4_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter6_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter5_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter7_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter6_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter8_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter7_reg[2 : 0];
        zext_ln38_reg_278_pp0_iter9_reg[2 : 0] <= zext_ln38_reg_278_pp0_iter8_reg[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_3_reg_268 <= ap_sig_allocacmp_i_3;
        i_3_reg_268_pp0_iter1_reg <= i_3_reg_268;
        p_r_M_value_1_reg_300 <= p_r_M_value_1_fu_242_p6;
        p_r_M_value_reg_294 <= p_r_M_value_fu_228_p6;
        zext_ln38_reg_278_pp0_iter1_reg[2 : 0] <= zext_ln38_reg_278[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        p_r_M_value_4_reg_366 <= temp2_0_q0;
        p_r_M_value_5_reg_372 <= temp2_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_t_1_reg_312 <= temp2_1_q1;
        p_t_reg_306 <= temp2_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_196_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln38_reg_278[2 : 0] <= zext_ln38_fu_214_p1[2 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        FFT_output_0_ce0 = 1'b1;
    end else begin
        FFT_output_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        FFT_output_0_ce1 = 1'b1;
    end else begin
        FFT_output_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        FFT_output_0_we0 = 1'b1;
    end else begin
        FFT_output_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        FFT_output_0_we1 = 1'b1;
    end else begin
        FFT_output_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        FFT_output_1_ce0 = 1'b1;
    end else begin
        FFT_output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        FFT_output_1_ce1 = 1'b1;
    end else begin
        FFT_output_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        FFT_output_1_we0 = 1'b1;
    end else begin
        FFT_output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        FFT_output_1_we1 = 1'b1;
    end else begin
        FFT_output_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_196_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter15_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_44;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        temp2_0_ce0 = 1'b1;
    end else begin
        temp2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp2_0_ce1 = 1'b1;
    end else begin
        temp2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        temp2_1_ce0 = 1'b1;
    end else begin
        temp2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp2_1_ce1 = 1'b1;
    end else begin
        temp2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FFT_output_0_address0 = zext_ln38_reg_278_pp0_iter15_reg;

assign FFT_output_0_address1 = zext_ln36_reg_338_pp0_iter15_reg;

assign FFT_output_0_d0 = p_r_M_value_8_reg_388;

assign FFT_output_0_d1 = p_r_M_value_6_reg_378;

assign FFT_output_1_address0 = zext_ln38_reg_278_pp0_iter15_reg;

assign FFT_output_1_address1 = zext_ln36_reg_338_pp0_iter15_reg;

assign FFT_output_1_d0 = p_r_M_value_9_reg_393;

assign FFT_output_1_d1 = p_r_M_value_7_reg_383;

assign add_ln36_fu_202_p2 = (ap_sig_allocacmp_i_3 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_162_p_ce = 1'b1;

assign grp_fu_162_p_din0 = mul_ac_i_i_i_reg_318;

assign grp_fu_162_p_din1 = mul_bd_i_i_i_reg_323;

assign grp_fu_162_p_opcode = 2'd1;

assign grp_fu_166_p_ce = 1'b1;

assign grp_fu_166_p_din0 = mul_ad_i_i_i_reg_328;

assign grp_fu_166_p_din1 = mul_bc_i_i_i_reg_333;

assign grp_fu_166_p_opcode = 2'd0;

assign grp_fu_170_p_ce = 1'b1;

assign grp_fu_170_p_din0 = p_r_M_value_4_reg_366;

assign grp_fu_170_p_din1 = p_r_M_value_2_reg_354;

assign grp_fu_170_p_opcode = 2'd0;

assign grp_fu_174_p_ce = 1'b1;

assign grp_fu_174_p_din0 = p_r_M_value_5_reg_372;

assign grp_fu_174_p_din1 = p_r_M_value_3_reg_360;

assign grp_fu_174_p_opcode = 2'd0;

assign grp_fu_178_p_ce = 1'b1;

assign grp_fu_178_p_din0 = p_r_M_value_reg_294;

assign grp_fu_178_p_din1 = p_t_reg_306;

assign grp_fu_182_p_ce = 1'b1;

assign grp_fu_182_p_din0 = p_r_M_value_1_reg_300;

assign grp_fu_182_p_din1 = p_t_1_reg_312;

assign icmp_ln36_fu_196_p2 = ((ap_sig_allocacmp_i_3 == 3'd4) ? 1'b1 : 1'b0);

assign temp2_0_address0 = zext_ln36_fu_256_p1;

assign temp2_0_address1 = zext_ln38_fu_214_p1;

assign temp2_1_address0 = zext_ln36_fu_256_p1;

assign temp2_1_address1 = zext_ln38_fu_214_p1;

assign trunc_ln38_fu_225_p1 = i_3_reg_268[1:0];

assign xor_ln38_fu_208_p2 = (ap_sig_allocacmp_i_3 ^ 3'd4);

assign zext_ln36_fu_256_p1 = i_3_reg_268_pp0_iter8_reg;

assign zext_ln38_fu_214_p1 = xor_ln38_fu_208_p2;

always @ (posedge ap_clk) begin
    zext_ln38_reg_278[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter1_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter2_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter3_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter4_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter5_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter6_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter7_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter8_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter9_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter10_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter11_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter12_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter13_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter14_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln38_reg_278_pp0_iter15_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_338[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_338_pp0_iter10_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_338_pp0_iter11_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_338_pp0_iter12_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_338_pp0_iter13_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_338_pp0_iter14_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_338_pp0_iter15_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //fft_8pt_fft_8pt_Pipeline_VITIS_LOOP_36_1
