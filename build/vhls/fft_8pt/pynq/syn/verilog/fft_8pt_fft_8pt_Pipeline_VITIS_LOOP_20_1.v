// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft_8pt_fft_8pt_Pipeline_VITIS_LOOP_20_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        reversed_buffer_M_value_address0,
        reversed_buffer_M_value_ce0,
        reversed_buffer_M_value_q0,
        reversed_buffer_M_value_address1,
        reversed_buffer_M_value_ce1,
        reversed_buffer_M_value_q1,
        reversed_buffer_M_value_1_address0,
        reversed_buffer_M_value_1_ce0,
        reversed_buffer_M_value_1_q0,
        reversed_buffer_M_value_1_address1,
        reversed_buffer_M_value_1_ce1,
        reversed_buffer_M_value_1_q1,
        temp1_M_value_address0,
        temp1_M_value_ce0,
        temp1_M_value_we0,
        temp1_M_value_d0,
        temp1_M_value_address1,
        temp1_M_value_ce1,
        temp1_M_value_we1,
        temp1_M_value_d1,
        temp1_M_value_1_address0,
        temp1_M_value_1_ce0,
        temp1_M_value_1_we0,
        temp1_M_value_1_d0,
        temp1_M_value_1_address1,
        temp1_M_value_1_ce1,
        temp1_M_value_1_we1,
        temp1_M_value_1_d1,
        grp_fu_162_p_din0,
        grp_fu_162_p_din1,
        grp_fu_162_p_opcode,
        grp_fu_162_p_dout0,
        grp_fu_162_p_ce,
        grp_fu_166_p_din0,
        grp_fu_166_p_din1,
        grp_fu_166_p_opcode,
        grp_fu_166_p_dout0,
        grp_fu_166_p_ce,
        grp_fu_170_p_din0,
        grp_fu_170_p_din1,
        grp_fu_170_p_opcode,
        grp_fu_170_p_dout0,
        grp_fu_170_p_ce,
        grp_fu_174_p_din0,
        grp_fu_174_p_din1,
        grp_fu_174_p_opcode,
        grp_fu_174_p_dout0,
        grp_fu_174_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] reversed_buffer_M_value_address0;
output   reversed_buffer_M_value_ce0;
input  [31:0] reversed_buffer_M_value_q0;
output  [2:0] reversed_buffer_M_value_address1;
output   reversed_buffer_M_value_ce1;
input  [31:0] reversed_buffer_M_value_q1;
output  [2:0] reversed_buffer_M_value_1_address0;
output   reversed_buffer_M_value_1_ce0;
input  [31:0] reversed_buffer_M_value_1_q0;
output  [2:0] reversed_buffer_M_value_1_address1;
output   reversed_buffer_M_value_1_ce1;
input  [31:0] reversed_buffer_M_value_1_q1;
output  [2:0] temp1_M_value_address0;
output   temp1_M_value_ce0;
output   temp1_M_value_we0;
output  [31:0] temp1_M_value_d0;
output  [2:0] temp1_M_value_address1;
output   temp1_M_value_ce1;
output   temp1_M_value_we1;
output  [31:0] temp1_M_value_d1;
output  [2:0] temp1_M_value_1_address0;
output   temp1_M_value_1_ce0;
output   temp1_M_value_1_we0;
output  [31:0] temp1_M_value_1_d0;
output  [2:0] temp1_M_value_1_address1;
output   temp1_M_value_1_ce1;
output   temp1_M_value_1_we1;
output  [31:0] temp1_M_value_1_d1;
output  [31:0] grp_fu_162_p_din0;
output  [31:0] grp_fu_162_p_din1;
output  [0:0] grp_fu_162_p_opcode;
input  [31:0] grp_fu_162_p_dout0;
output   grp_fu_162_p_ce;
output  [31:0] grp_fu_166_p_din0;
output  [31:0] grp_fu_166_p_din1;
output  [1:0] grp_fu_166_p_opcode;
input  [31:0] grp_fu_166_p_dout0;
output   grp_fu_166_p_ce;
output  [31:0] grp_fu_170_p_din0;
output  [31:0] grp_fu_170_p_din1;
output  [0:0] grp_fu_170_p_opcode;
input  [31:0] grp_fu_170_p_dout0;
output   grp_fu_170_p_ce;
output  [31:0] grp_fu_174_p_din0;
output  [31:0] grp_fu_174_p_din1;
output  [0:0] grp_fu_174_p_opcode;
input  [31:0] grp_fu_174_p_dout0;
output   grp_fu_174_p_ce;

reg ap_idle;
reg reversed_buffer_M_value_ce0;
reg reversed_buffer_M_value_ce1;
reg reversed_buffer_M_value_1_ce0;
reg reversed_buffer_M_value_1_ce1;
reg temp1_M_value_ce0;
reg temp1_M_value_we0;
reg temp1_M_value_ce1;
reg temp1_M_value_we1;
reg temp1_M_value_1_ce0;
reg temp1_M_value_1_we0;
reg temp1_M_value_1_ce1;
reg temp1_M_value_1_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_fu_164_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln20_fu_172_p1;
reg   [63:0] zext_ln20_reg_216;
reg   [63:0] zext_ln20_reg_216_pp0_iter1_reg;
reg   [63:0] zext_ln20_reg_216_pp0_iter2_reg;
reg   [63:0] zext_ln20_reg_216_pp0_iter3_reg;
reg   [63:0] zext_ln20_reg_216_pp0_iter4_reg;
reg   [63:0] zext_ln20_reg_216_pp0_iter5_reg;
reg   [63:0] zext_ln20_reg_216_pp0_iter6_reg;
wire   [63:0] zext_ln22_fu_188_p1;
reg   [63:0] zext_ln22_reg_232;
reg   [63:0] zext_ln22_reg_232_pp0_iter1_reg;
reg   [63:0] zext_ln22_reg_232_pp0_iter2_reg;
reg   [63:0] zext_ln22_reg_232_pp0_iter3_reg;
reg   [63:0] zext_ln22_reg_232_pp0_iter4_reg;
reg   [63:0] zext_ln22_reg_232_pp0_iter5_reg;
reg   [63:0] zext_ln22_reg_232_pp0_iter6_reg;
reg   [31:0] p_r_M_value_reg_248;
reg   [31:0] p_r_M_value_10_reg_254;
reg   [31:0] this_M_value_load_reg_260;
reg   [31:0] this_M_value_2_load_reg_266;
reg   [31:0] p_r_M_value_2_reg_272;
reg   [31:0] p_r_M_value_3_reg_277;
reg   [31:0] p_r_M_value_4_reg_282;
reg   [31:0] p_r_M_value_5_reg_287;
wire    ap_block_pp0_stage0;
reg   [3:0] i_2_fu_36;
wire   [3:0] add_ln20_fu_194_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire   [2:0] trunc_ln20_fu_178_p1;
wire   [2:0] or_ln22_fu_182_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft_8pt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_164_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_36 <= add_ln20_fu_194_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_36 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        zext_ln20_reg_216_pp0_iter1_reg[3 : 0] <= zext_ln20_reg_216[3 : 0];
        zext_ln22_reg_232_pp0_iter1_reg[2 : 1] <= zext_ln22_reg_232[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        p_r_M_value_2_reg_272 <= grp_fu_162_p_dout0;
        p_r_M_value_3_reg_277 <= grp_fu_166_p_dout0;
        p_r_M_value_4_reg_282 <= grp_fu_170_p_dout0;
        p_r_M_value_5_reg_287 <= grp_fu_174_p_dout0;
        zext_ln20_reg_216_pp0_iter2_reg[3 : 0] <= zext_ln20_reg_216_pp0_iter1_reg[3 : 0];
        zext_ln20_reg_216_pp0_iter3_reg[3 : 0] <= zext_ln20_reg_216_pp0_iter2_reg[3 : 0];
        zext_ln20_reg_216_pp0_iter4_reg[3 : 0] <= zext_ln20_reg_216_pp0_iter3_reg[3 : 0];
        zext_ln20_reg_216_pp0_iter5_reg[3 : 0] <= zext_ln20_reg_216_pp0_iter4_reg[3 : 0];
        zext_ln20_reg_216_pp0_iter6_reg[3 : 0] <= zext_ln20_reg_216_pp0_iter5_reg[3 : 0];
        zext_ln22_reg_232_pp0_iter2_reg[2 : 1] <= zext_ln22_reg_232_pp0_iter1_reg[2 : 1];
        zext_ln22_reg_232_pp0_iter3_reg[2 : 1] <= zext_ln22_reg_232_pp0_iter2_reg[2 : 1];
        zext_ln22_reg_232_pp0_iter4_reg[2 : 1] <= zext_ln22_reg_232_pp0_iter3_reg[2 : 1];
        zext_ln22_reg_232_pp0_iter5_reg[2 : 1] <= zext_ln22_reg_232_pp0_iter4_reg[2 : 1];
        zext_ln22_reg_232_pp0_iter6_reg[2 : 1] <= zext_ln22_reg_232_pp0_iter5_reg[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_r_M_value_10_reg_254 <= reversed_buffer_M_value_1_q1;
        p_r_M_value_reg_248 <= reversed_buffer_M_value_q1;
        this_M_value_2_load_reg_266 <= reversed_buffer_M_value_1_q0;
        this_M_value_load_reg_260 <= reversed_buffer_M_value_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_164_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln20_reg_216[3 : 0] <= zext_ln20_fu_172_p1[3 : 0];
        zext_ln22_reg_232[2 : 1] <= zext_ln22_fu_188_p1[2 : 1];
    end
end

always @ (*) begin
    if (((tmp_fu_164_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_36;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reversed_buffer_M_value_1_ce0 = 1'b1;
    end else begin
        reversed_buffer_M_value_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reversed_buffer_M_value_1_ce1 = 1'b1;
    end else begin
        reversed_buffer_M_value_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reversed_buffer_M_value_ce0 = 1'b1;
    end else begin
        reversed_buffer_M_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reversed_buffer_M_value_ce1 = 1'b1;
    end else begin
        reversed_buffer_M_value_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        temp1_M_value_1_ce0 = 1'b1;
    end else begin
        temp1_M_value_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        temp1_M_value_1_ce1 = 1'b1;
    end else begin
        temp1_M_value_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        temp1_M_value_1_we0 = 1'b1;
    end else begin
        temp1_M_value_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        temp1_M_value_1_we1 = 1'b1;
    end else begin
        temp1_M_value_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        temp1_M_value_ce0 = 1'b1;
    end else begin
        temp1_M_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        temp1_M_value_ce1 = 1'b1;
    end else begin
        temp1_M_value_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        temp1_M_value_we0 = 1'b1;
    end else begin
        temp1_M_value_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        temp1_M_value_we1 = 1'b1;
    end else begin
        temp1_M_value_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_fu_194_p2 = (ap_sig_allocacmp_i + 4'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_162_p_ce = 1'b1;

assign grp_fu_162_p_din0 = p_r_M_value_reg_248;

assign grp_fu_162_p_din1 = this_M_value_load_reg_260;

assign grp_fu_162_p_opcode = 2'd0;

assign grp_fu_166_p_ce = 1'b1;

assign grp_fu_166_p_din0 = p_r_M_value_10_reg_254;

assign grp_fu_166_p_din1 = this_M_value_2_load_reg_266;

assign grp_fu_166_p_opcode = 2'd0;

assign grp_fu_170_p_ce = 1'b1;

assign grp_fu_170_p_din0 = p_r_M_value_reg_248;

assign grp_fu_170_p_din1 = this_M_value_load_reg_260;

assign grp_fu_170_p_opcode = 2'd1;

assign grp_fu_174_p_ce = 1'b1;

assign grp_fu_174_p_din0 = p_r_M_value_10_reg_254;

assign grp_fu_174_p_din1 = this_M_value_2_load_reg_266;

assign grp_fu_174_p_opcode = 2'd1;

assign or_ln22_fu_182_p2 = (trunc_ln20_fu_178_p1 | 3'd1);

assign reversed_buffer_M_value_1_address0 = zext_ln22_fu_188_p1;

assign reversed_buffer_M_value_1_address1 = zext_ln20_fu_172_p1;

assign reversed_buffer_M_value_address0 = zext_ln22_fu_188_p1;

assign reversed_buffer_M_value_address1 = zext_ln20_fu_172_p1;

assign temp1_M_value_1_address0 = zext_ln22_reg_232_pp0_iter6_reg;

assign temp1_M_value_1_address1 = zext_ln20_reg_216_pp0_iter6_reg;

assign temp1_M_value_1_d0 = p_r_M_value_5_reg_287;

assign temp1_M_value_1_d1 = p_r_M_value_3_reg_277;

assign temp1_M_value_address0 = zext_ln22_reg_232_pp0_iter6_reg;

assign temp1_M_value_address1 = zext_ln20_reg_216_pp0_iter6_reg;

assign temp1_M_value_d0 = p_r_M_value_4_reg_282;

assign temp1_M_value_d1 = p_r_M_value_2_reg_272;

assign tmp_fu_164_p3 = ap_sig_allocacmp_i[32'd3];

assign trunc_ln20_fu_178_p1 = ap_sig_allocacmp_i[2:0];

assign zext_ln20_fu_172_p1 = ap_sig_allocacmp_i;

assign zext_ln22_fu_188_p1 = or_ln22_fu_182_p2;

always @ (posedge ap_clk) begin
    zext_ln20_reg_216[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_216_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_216_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_216_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_216_pp0_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_216_pp0_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_216_pp0_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_232[0] <= 1'b1;
    zext_ln22_reg_232[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_232_pp0_iter1_reg[0] <= 1'b1;
    zext_ln22_reg_232_pp0_iter1_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_232_pp0_iter2_reg[0] <= 1'b1;
    zext_ln22_reg_232_pp0_iter2_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_232_pp0_iter3_reg[0] <= 1'b1;
    zext_ln22_reg_232_pp0_iter3_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_232_pp0_iter4_reg[0] <= 1'b1;
    zext_ln22_reg_232_pp0_iter4_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_232_pp0_iter5_reg[0] <= 1'b1;
    zext_ln22_reg_232_pp0_iter5_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln22_reg_232_pp0_iter6_reg[0] <= 1'b1;
    zext_ln22_reg_232_pp0_iter6_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //fft_8pt_fft_8pt_Pipeline_VITIS_LOOP_20_1
